// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HedgeClient is the client API for Hedge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HedgeClient interface {
	Send(ctx context.Context, opts ...grpc.CallOption) (Hedge_SendClient, error)
	Broadcast(ctx context.Context, opts ...grpc.CallOption) (Hedge_BroadcastClient, error)
	DMemWrite(ctx context.Context, opts ...grpc.CallOption) (Hedge_DMemWriteClient, error)
	DMemRead(ctx context.Context, opts ...grpc.CallOption) (Hedge_DMemReadClient, error)
	DMemClose(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*Payload, error)
}

type hedgeClient struct {
	cc grpc.ClientConnInterface
}

func NewHedgeClient(cc grpc.ClientConnInterface) HedgeClient {
	return &hedgeClient{cc}
}

func (c *hedgeClient) Send(ctx context.Context, opts ...grpc.CallOption) (Hedge_SendClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hedge_ServiceDesc.Streams[0], "/hedge.proto.v1.Hedge/Send", opts...)
	if err != nil {
		return nil, err
	}
	x := &hedgeSendClient{stream}
	return x, nil
}

type Hedge_SendClient interface {
	Send(*Payload) error
	Recv() (*Payload, error)
	grpc.ClientStream
}

type hedgeSendClient struct {
	grpc.ClientStream
}

func (x *hedgeSendClient) Send(m *Payload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hedgeSendClient) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hedgeClient) Broadcast(ctx context.Context, opts ...grpc.CallOption) (Hedge_BroadcastClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hedge_ServiceDesc.Streams[1], "/hedge.proto.v1.Hedge/Broadcast", opts...)
	if err != nil {
		return nil, err
	}
	x := &hedgeBroadcastClient{stream}
	return x, nil
}

type Hedge_BroadcastClient interface {
	Send(*Payload) error
	Recv() (*Payload, error)
	grpc.ClientStream
}

type hedgeBroadcastClient struct {
	grpc.ClientStream
}

func (x *hedgeBroadcastClient) Send(m *Payload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hedgeBroadcastClient) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hedgeClient) DMemWrite(ctx context.Context, opts ...grpc.CallOption) (Hedge_DMemWriteClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hedge_ServiceDesc.Streams[2], "/hedge.proto.v1.Hedge/DMemWrite", opts...)
	if err != nil {
		return nil, err
	}
	x := &hedgeDMemWriteClient{stream}
	return x, nil
}

type Hedge_DMemWriteClient interface {
	Send(*Payload) error
	Recv() (*Payload, error)
	grpc.ClientStream
}

type hedgeDMemWriteClient struct {
	grpc.ClientStream
}

func (x *hedgeDMemWriteClient) Send(m *Payload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hedgeDMemWriteClient) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hedgeClient) DMemRead(ctx context.Context, opts ...grpc.CallOption) (Hedge_DMemReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hedge_ServiceDesc.Streams[3], "/hedge.proto.v1.Hedge/DMemRead", opts...)
	if err != nil {
		return nil, err
	}
	x := &hedgeDMemReadClient{stream}
	return x, nil
}

type Hedge_DMemReadClient interface {
	Send(*Payload) error
	Recv() (*Payload, error)
	grpc.ClientStream
}

type hedgeDMemReadClient struct {
	grpc.ClientStream
}

func (x *hedgeDMemReadClient) Send(m *Payload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hedgeDMemReadClient) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hedgeClient) DMemClose(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*Payload, error) {
	out := new(Payload)
	err := c.cc.Invoke(ctx, "/hedge.proto.v1.Hedge/DMemClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HedgeServer is the server API for Hedge service.
// All implementations must embed UnimplementedHedgeServer
// for forward compatibility
type HedgeServer interface {
	Send(Hedge_SendServer) error
	Broadcast(Hedge_BroadcastServer) error
	DMemWrite(Hedge_DMemWriteServer) error
	DMemRead(Hedge_DMemReadServer) error
	DMemClose(context.Context, *Payload) (*Payload, error)
	mustEmbedUnimplementedHedgeServer()
}

// UnimplementedHedgeServer must be embedded to have forward compatible implementations.
type UnimplementedHedgeServer struct {
}

func (UnimplementedHedgeServer) Send(Hedge_SendServer) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedHedgeServer) Broadcast(Hedge_BroadcastServer) error {
	return status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedHedgeServer) DMemWrite(Hedge_DMemWriteServer) error {
	return status.Errorf(codes.Unimplemented, "method DMemWrite not implemented")
}
func (UnimplementedHedgeServer) DMemRead(Hedge_DMemReadServer) error {
	return status.Errorf(codes.Unimplemented, "method DMemRead not implemented")
}
func (UnimplementedHedgeServer) DMemClose(context.Context, *Payload) (*Payload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DMemClose not implemented")
}
func (UnimplementedHedgeServer) mustEmbedUnimplementedHedgeServer() {}

// UnsafeHedgeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HedgeServer will
// result in compilation errors.
type UnsafeHedgeServer interface {
	mustEmbedUnimplementedHedgeServer()
}

func RegisterHedgeServer(s grpc.ServiceRegistrar, srv HedgeServer) {
	s.RegisterService(&Hedge_ServiceDesc, srv)
}

func _Hedge_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HedgeServer).Send(&hedgeSendServer{stream})
}

type Hedge_SendServer interface {
	Send(*Payload) error
	Recv() (*Payload, error)
	grpc.ServerStream
}

type hedgeSendServer struct {
	grpc.ServerStream
}

func (x *hedgeSendServer) Send(m *Payload) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hedgeSendServer) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Hedge_Broadcast_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HedgeServer).Broadcast(&hedgeBroadcastServer{stream})
}

type Hedge_BroadcastServer interface {
	Send(*Payload) error
	Recv() (*Payload, error)
	grpc.ServerStream
}

type hedgeBroadcastServer struct {
	grpc.ServerStream
}

func (x *hedgeBroadcastServer) Send(m *Payload) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hedgeBroadcastServer) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Hedge_DMemWrite_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HedgeServer).DMemWrite(&hedgeDMemWriteServer{stream})
}

type Hedge_DMemWriteServer interface {
	Send(*Payload) error
	Recv() (*Payload, error)
	grpc.ServerStream
}

type hedgeDMemWriteServer struct {
	grpc.ServerStream
}

func (x *hedgeDMemWriteServer) Send(m *Payload) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hedgeDMemWriteServer) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Hedge_DMemRead_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HedgeServer).DMemRead(&hedgeDMemReadServer{stream})
}

type Hedge_DMemReadServer interface {
	Send(*Payload) error
	Recv() (*Payload, error)
	grpc.ServerStream
}

type hedgeDMemReadServer struct {
	grpc.ServerStream
}

func (x *hedgeDMemReadServer) Send(m *Payload) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hedgeDMemReadServer) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Hedge_DMemClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HedgeServer).DMemClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hedge.proto.v1.Hedge/DMemClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HedgeServer).DMemClose(ctx, req.(*Payload))
	}
	return interceptor(ctx, in, info, handler)
}

// Hedge_ServiceDesc is the grpc.ServiceDesc for Hedge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hedge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hedge.proto.v1.Hedge",
	HandlerType: (*HedgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DMemClose",
			Handler:    _Hedge_DMemClose_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _Hedge_Send_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Broadcast",
			Handler:       _Hedge_Broadcast_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DMemWrite",
			Handler:       _Hedge_DMemWrite_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DMemRead",
			Handler:       _Hedge_DMemRead_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "default.proto",
}
